 >>> import importlib
>>> BaseGeometry = importlib.import_module('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Valid integer values
>>> bg.integer_validator("width", 5)  # Should not raise an exception
>>> bg.integer_validator("height", 10)  # Should not raise an exception
>>> bg.integer_validator("length", 1)  # Minimum valid integer, should not raise an exception
>>> bg.integer_validator("depth", 1000)  # Large valid integer, should not raise an exception

# Invalid types (non-integers)
>>> bg.integer_validator("width", "5")  # Raises TypeError
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("height", 5.5)  # Raises TypeError
Traceback (most recent call last):
    ...
TypeError: height must be an integer

>>> bg.integer_validator("length", [1, 2, 3])  # List: Raises TypeError
Traceback (most recent call last):
    ...
TypeError: length must be an integer

>>> bg.integer_validator("depth", (1, 2))  # Tuple: Raises TypeError
Traceback (most recent call last):
    ...
TypeError: depth must be an integer

>>> bg.integer_validator("size", {1, 2, 3})  # Set: Raises TypeError
Traceback (most recent call last):
    ...
TypeError: size must be an integer

>>> bg.integer_validator("values", {"key": 1})  # Dictionary: Raises TypeError
Traceback (most recent call last):
    ...
TypeError: values must be an integer

>>> bg.integer_validator("width", None)  # Raises TypeError
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", True)  # Raises TypeError (bool is a subclass of int, but not allowed)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

# Invalid values (less than or equal to zero)
>>> bg.integer_validator("height", -3)  # Raises ValueError
Traceback (most recent call last):
    ...
ValueError: height must be greater than 0

>>> bg.integer_validator("length", 0)  # Raises ValueError
Traceback (most recent call last):
    ...
ValueError: length must be greater than 0

>>> bg.integer_validator("depth", -1000)  # Raises ValueError
Traceback (most recent call last):
    ...
ValueError: depth must be greater than 0

# Edge cases
>>> bg.integer_validator("height", 1)  # Minimum valid value, should not raise an exception
>>> bg.integer_validator("length", 2**31 - 1)  # Maximum 32-bit integer value, should not raise an exception

# Check area method (should raise exception as it's not implemented)
>>> bg.area()  # Raises Exception
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Additional tests for other collection types
>>> bg.integer_validator("size", {"a": 1})  # Dictionary, Raises TypeError
Traceback (most recent call last):
    ...
TypeError: size must be an integer

>>> bg.integer_validator("length", (1, 2, 3))  # Tuple, Raises TypeError
Traceback (most recent call last):
    ...
TypeError: length must be an integer

>>> bg.integer_validator("set_size", {1, 2, 3})  # Set, Raises TypeError
Traceback (most recent call last):
    ...
TypeError: set_size must be an integer

>>> bg.integer_validator("tuple_value", (4,))  # Single-element tuple, Raises TypeError
Traceback (most recent call last):
    ...
TypeError: tuple_value must be an integer

>>> bg.integer_validator("list_value", [42])  # Single-element list, Raises TypeError
Traceback (most recent call last):
    ...
TypeError: list_value must be an integer
